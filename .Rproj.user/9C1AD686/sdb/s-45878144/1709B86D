{
    "collab_server" : "",
    "contents" : "library(testthat)\nlibrary(pwrAB)\n\ncontext(\"Check if output is consistent\")\n\n### AB_t2n tests\n\ntest_that(\"Output is consistent for AB_t2n two_sided test\", {\n  # power\n  expect_equal(AB_t2n(N = 3000, percent_B = .4, mean_diff = .15, sd_A = 1,\n                      sd_B = 2, sig_level = .05,\n                      alternative = 'two_sided')$power, 0.6714653, tolerance = .01)\n  # sig_level\n  expect_equal(AB_t2n(N = 3000, percent_B = .4, mean_diff = .15, sd_A = 1,\n                      sd_B = 2, power = 0.6714653,\n                      alternative = 'two_sided')$sig_level, 0.05, tolerance = .002)\n  # N\n  expect_equal(AB_t2n(percent_B = .4, mean_diff = .15, sd_A = 1,\n                      sd_B = 2, sig_level = .05, power = 0.6714653,\n                      alternative = 'two_sided')$N, 3000, tolerance = 1)\n  # percent_B\n  expect_equal(AB_t2n(N = 3000, mean_diff = .15, sd_A = 1,\n                      sd_B = 2, sig_level = .05, power = 0.6714653,\n                      alternative = 'two_sided')$percent_B, .4, tolerance = .01)\n  # mean_diff\n  expect_equal(AB_t2n(N = 3000, percent_B = .4,\n                      sd_A = 1, sd_B = 2, sig_level = .05, power = 0.6714653,\n                      alternative = 'two_sided')$mean_diff, .15, tolerance = .002)\n})\n\ntest_that(\"Output is consistent for AB_t2n 'less' test\", {\n  # power\n  expect_equal(AB_t2n(N = 3000, percent_B = .4, mean_diff = -.15, sd_A = 1,\n                      sd_B = 2, sig_level = .05,\n                      alternative = 'less')$power, 0.7762178, tolerance = .01)\n  # sig_level\n  expect_equal(AB_t2n(N = 3000, percent_B = .4, mean_diff = -.15, sd_A = 1,\n                      sd_B = 2, power = 0.7762178,\n                      alternative = 'less')$sig_level, 0.05, tolerance = .002)\n  # N\n  expect_equal(AB_t2n(percent_B = .4, mean_diff = -.15, sd_A = 1,\n                      sd_B = 2, sig_level = .05, power = 0.7762178,\n                      alternative = 'less')$N, 3000, tolerance = 1)\n  # percent_B\n  expect_equal(AB_t2n(N = 3000, mean_diff = -.15, sd_A = 1,\n                      sd_B = 2, sig_level = .05, power = 0.7762178,\n                      alternative = 'less')$percent_B, .4, tolerance = .01)\n  # mean_diff\n  expect_equal(AB_t2n(N = 3000, percent_B = .4, sd_A = 1,\n                      sd_B = 2, sig_level = .05, power = 0.7762178,\n                      alternative = 'less')$mean_diff, -.15, tolerance = .002)\n})\n\ntest_that(\"Output is consistent for AB_t2n 'greater' test\", {\n  # power\n  expect_equal(AB_t2n(N = 2000, percent_B = .4, mean_diff = .2, sd_A = 3,\n                      sd_B = 2, sig_level = .05,\n                      alternative = 'greater')$power, 0.5570109, tolerance = .01)\n  # sig_level\n  expect_equal(AB_t2n(N = 2000, percent_B = .4, mean_diff = .2, sd_A = 3,\n                      sd_B = 2, power = 0.5570109,\n                      alternative = 'greater')$sig_level, 0.05, tolerance = .002)\n  # N\n  expect_equal(AB_t2n(percent_B = .4, mean_diff = .2, sd_A = 3,\n                      sd_B = 2, sig_level = .05, power = 0.5570109,\n                      alternative = 'greater')$N, 2000, tolerance = 1)\n  # percent_B\n  expect_equal(AB_t2n(N = 2000, mean_diff = .2, sd_A = 3,\n                      sd_B = 2, sig_level = .05, power = 0.5570109,\n                      alternative = 'greater')$percent_B, .4, tolerance = .01)\n  # mean_diff\n  expect_equal(AB_t2n(N = 2000, percent_B = .4, sd_A = 3,\n                      sd_B = 2, sig_level = .05, power = 0.5570109,\n                      alternative = 'greater')$mean_diff, .2, tolerance = .002)\n})\n\n### AB_t2n_prop tests\n\ntest_that(\"Output is consistent for AB_t2n_prop 'two_sided' test\", {\n  # power\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .12,\n                           N = 10000, percent_B = .4,\n                           sig_level = .05,\n                           alternative = 'two_sided')$power, 0.8745193, tolerance = .01)\n  # sig_level\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .12,\n                           N = 10000, percent_B = .4,\n                           power = 0.8745193,\n                           alternative = 'two_sided')$sig_level, 0.05, tolerance = .002)\n  # N\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .12,\n                           percent_B = .4,\n                           sig_level = .05, power = 0.8745193,\n                           alternative = 'two_sided')$N, 10000, tolerance = 1)\n  # percent_B\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .12,\n                           N = 10000,\n                           sig_level = .05, power = 0.8745193,\n                           alternative = 'two_sided')$percent_B, .4, tolerance = .01)\n  # prop_A\n  expect_equal(AB_t2n_prop(prop_B = .12,\n                           N = 10000, percent_B = .4,\n                           sig_level = .05, power = 0.8745193,\n                           alternative = 'two_sided')$prop_A[1], .1, tolerance = .002)\n  # prop_B\n  expect_equal(AB_t2n_prop(prop_A = .1,\n                           N = 10000, percent_B = .4,\n                           sig_level = .05, power = 0.8745193,\n                           alternative = 'two_sided')$prop_B[2], .12, tolerance = .002)\n})\n\ntest_that(\"Output is consistent for AB_t2n_prop 'less' test\", {\n  # power\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .06,\n                           N = 1000, percent_B = .2,\n                           sig_level = .05,\n                           alternative = 'less')$power, 0.642594, tolerance = .01)\n  # sig_level\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .06,\n                           N = 1000, percent_B = .2,\n                           power = 0.642594,\n                           alternative = 'less')$sig_level, 0.05, tolerance = .002)\n  # N\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .06,\n                           percent_B = .2,\n                           sig_level = .05, power = 0.642594,\n                           alternative = 'less')$N, 1000, tolerance = 1)\n  # percent_B\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .06,\n                           N = 1000,\n                           sig_level = .05, power = 0.642594,\n                           alternative = 'less')$percent_B, .2, tolerance = .01)\n  # prop_A\n  expect_equal(AB_t2n_prop(prop_B = .06,\n                           N = 1000, percent_B = .2,\n                           sig_level = .05, power = 0.642594,\n                           alternative = 'less')$prop_A, .1, tolerance = .002)\n  # prop_B\n  expect_equal(AB_t2n_prop(prop_A = .1,\n                           N = 1000, percent_B = .2,\n                           sig_level = .05, power = 0.642594,\n                           alternative = 'less')$prop_B, .06, tolerance = .002)\n})\n\ntest_that(\"Output is consistent for AB_t2n_prop 'greater' test\", {\n  # power\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .11,\n                           N = 40000, percent_B = .2,\n                           sig_level = .025,\n                           alternative = 'greater')$power, 0.7315558, tolerance = .01)\n  # sig_level\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .11,\n                           N = 40000, percent_B = .2,\n                           power = 0.7315558,\n                           alternative = 'greater')$sig_level, 0.025, tolerance = .002)\n  # N\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .11,\n                           percent_B = .2,\n                           sig_level = .025, power = 0.7315558,\n                           alternative = 'greater')$N, 40000, tolerance = 1)\n  # percent_B\n  expect_equal(AB_t2n_prop(prop_A = .1, prop_B = .11,\n                           N = 40000,\n                           sig_level = .025, power = 0.7315558,\n                           alternative = 'greater')$percent_B, .2, tolerance = .01)\n  # prop_A\n  expect_equal(AB_t2n_prop(prop_B = .11,\n                           N = 40000, percent_B = .2,\n                           sig_level = .025, power = 0.7315558,\n                           alternative = 'greater')$prop_A, .1, tolerance = .002)\n  # prop_B\n  expect_equal(AB_t2n_prop(prop_A = .1,\n                           N = 40000, percent_B = .2,\n                           sig_level = .025, power = 0.7315558,\n                           alternative = 'greater')$prop_B, .11, tolerance = .002)\n})\n",
    "created" : 1496616328139.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1074877790",
    "id" : "1709B86D",
    "lastKnownWriteTime" : 1496619385,
    "last_content_update" : 1496619385839,
    "path" : "~/Desktop/pwrAB/tests/testthat.R",
    "project_path" : "tests/testthat.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}